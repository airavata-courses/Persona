#!/usr/bin/env groovy
pipeline {
    triggers {
        pollSCM('* * * * *') 
    }
    agent { node { label 'worker' } }

    environment {
        IMAGE_TAG = "${env.BUILD_NUMBER}"

    }

    stages {
        stage("Clone Repository") {
            steps {
//                git branch: 'gateway-service', credentialsId: 'bfa23bab-8106-47fd-a41f-4c63413bfe04', url: 'https://github.com/airavata-courses/Persona' 
    checkout([
        $class: 'GitSCM', 
        branches: [[name: '*/gateway-service-jenkins']], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'CleanCheckout']], 
        submoduleCfg: [], 
        userRemoteConfigs: [[credentialsId: 'bfa23bab-8106-47fd-a41f-4c63413bfe04', url: 'https://github.com/airavata-courses/Persona']]
    ])
            }
        }

        stage("Build Repository") {
            steps {
                sh "cd $WORKSPACE/GatewayService && mvn -f Gateway/pom.xml install -DskipTests=true"
            }
        }

        stage("Tests Repository") {
            steps {
                sh "echo test"
            }

        }

        stage("Build & Publish") {
            steps {
                sh "cd $WORKSPACE/GatewayService/Gateway && docker build -t personateam/gatewayservice:latest ."
                sh 'docker login -u personateam -p personateam'
                sh "docker push personateam/gatewayservice:latest"
            }

        }

        stage("Deleting local Image") {

            steps {
                sh "docker rmi personateam/gatewayservice:latest"
            }
        }
        
        stage("Deploy on kubernetes") {
            steps {
                sh "sed -i 's/VERSION/${env.BUILD_NUMBER}/g' $WORKSPACE/GatewayService/Gateway/manifest/kubernetes-manifest.yml"
                sh "cd $WORKSPACE/GatewayService/Gateway/manifest && kubectl apply -f kubernetes-manifest.yml"
            }
        }
    }

    post {
        always {
            sh "echo post || true"
        }

    }
}
